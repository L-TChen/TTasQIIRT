\documentclass[sigplan,10pt,anonymous,review]{acmart}\settopmatter{printfolios=true,printccs=false,printacmref=false}
\setcopyright{acmlicensed}
\copyrightyear{2025}
\acmYear{2025}
\acmDOI{XXXXXXX.XXXXXXX}
\acmConference[Conference acronym 'XX]{Make sure to enter the correct
  conference title from your rights confirmation email}{June 03--05,
  2018}{Woodstock, NY}
%%
%%  Uncomment \acmBooktitle if the title of the proceedings is different
%%  from ``Proceedings of ...''!
%%
%%\acmBooktitle{Woodstock '18: ACM Symposium on Neural Gaze Detection,
%%  June 03--05, 2018, Woodstock, NY}
\acmISBN{978-1-4503-XXXX-X/2018/06}

%%% Packages %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage[utf8]{inputenc}
\usepackage{newunicodechar}
\usepackage{xspace}
\usepackage{xcolor}
\usepackage{mathtools}
\let\Bbbk\relax
\usepackage{amsmath,amssymb,mathbbol}
\let\Bbbk\relax
\usepackage{bbold}

%% Remove the following if there are no todo items.
\setlength {\marginparwidth }{2cm}
\usepackage[obeyFinal,textsize=footnotesize]{todonotes}
\usepackage[capitalise]{cleveref}
\newcommand{\LT}[2][]{\todo[inline,author={L-T},caption={},color={pink},#1]{#2}}
\newcommand{\Fredrik}[2][]{\todo[inline,author={Fred},caption={},#1]{#2}}

\usepackage{microtype}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Macros %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\CA}{\textsc{Cubical Agda}\xspace}
\newcommand{\Agda}{\textsc{Agda}\xspace}
\newcommand{\Set}{\mathbf{Set}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\usepackage{newunicodechar}

%%% lhs2tex %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\cons}[1]{\mathbf{#1}}
\newcommand{\iden}{\mathit}

\newcommand{\awa}[2]{\mathrlap{#2}\phantom{#1}} % as wide as

\definecolor{addition}{RGB}{204,255,216}
\newcommand{\highlight}[2]{\smash{\text{\colorbox{#1}{\kern-.1em\vphantom{\vrule height 1.2ex depth 0.1ex}\smash{\ensuremath{#2}}\kern-.1em}}}}

%include agda.fmt

%% end of the preamble, start of the body of the document source.

\begin{document}

%%
%% The "title" command has an optional parameter,
%% allowing the author to define a "short title" to be used in page headers.
\title[Can Natural Model Simplify the Metatheory of Type Theory?]{Can Inspiration From Natural Models Simplify the Metatheory of Type Theory in Cubical Agda?}

%%
%% The "author" command and its associated commands are used to define
%% the authors and their affiliations.
%% Of note is the shared affiliation of the first two authors, and the
%% "authornote" and "authornotemark" commands
%% used to denote shared contribution to the research.
\author{Liang-Ting Chen}
\affiliation{%
  \institution{Institute of Information Science, Academia Sinica}
  \city{Taipei}
  \country{Taiwan}}
\email{liangtingchen@@as.edu.tw}

\author{Fredrik Nordvall Forsberg}
\affiliation{%
  \institution{Department of Computer and Information Sciences, University of Strathclyde}
  \city{Glasgow}
  \country{United Kingdom}}

\author{Tzu-Chun Tsai}
\affiliation{%
  \institution{Institute of Information Science, Academia Sinica}
  \city{Taipei}
  \country{Taiwan}}
%\affiliation{%
%  \institution{Institute for Logic, Language and Computation, University of Amsterdam}
%  \city{Amsterdam}
%  \country{Netherlands}}

%%
%% By default, the full list of authors will be used in the page
%% headers. Often, this list is too long, and will overlap
%% other information printed in the page headers. This command allows
%% the author to define a more concise list
%% of authors' names for this purpose.
%\renewcommand{\shortauthors}{Trovato et al.}

%%
%% The abstract is a short summary of the work to be presented in the
%% article.
\begin{abstract}
  We report on an approach to formalising type theory in type theory, inspired by Awodey’s \emph{natural models} of type theory.
  The initial natural model is represented as strictly positive quotient inductive-inductive-recursive types in the proof assistant \CA, leading us to a syntax without any `transport hell'.
We formalise some meta-properties such as the standard % and logical predicate
interpretation, normalisation by evaluation for typed terms, and strictification constructions.
Since our formalisation is carried out using \CA's native support for quotient inductive types, all our constructions compute at a reasonable speed.

However, the `transport hell' problem reappears when we try to develop more sophisticated metatheory.
Ultimately, it remains a considerable struggle to develop the metatheory of type theory using an intrinsic representation that lacks strict equations.
The effort required is about the same whether or not the notion of natural model is used.
\end{abstract}

%% The code below is generated by the tool at http://dl.acm.org/ccs.cfm.
%% Please copy and paste the code instead of the example below.
\begin{CCSXML}
<ccs2012>
   <concept>
       <concept_id>10003752.10003790.10011740</concept_id>
       <concept_desc>Theory of computation~Type theory</concept_desc>
       <concept_significance>500</concept_significance>
       </concept>
 </ccs2012>
\end{CCSXML}

\ccsdesc[500]{Theory of computation~Type theory}

\keywords{Proof Assistants, Formalisation, Cubical Agda, Quotient Inductive-Inductive-Recursive Type}
%% A "teaser" image appears between the author and affiliation
%% information and the body of the document, and typically spans the
%% page.

%\received{20 February 2007}
%\received[revised]{12 March 2009}
%\received[accepted]{5 June 2009}

\maketitle
\bibliographystyle{ACM-Reference-Format}

\section{Introduction}
% FNF (Fri 5 Sep)

Internalising the syntax and semantics of type theory in type theory is a longstanding problem which stretches the limits of the theory~\cite{Dybjer1996,Danielsson2006,Chapman2009,Benton2012,Altenkirch2016a}.
\LT[noinline]{Is McBride2012 Bento2012?}
%
There are both practical and theoretical reasons to pursue this problem.
%
On the practical side, such an internal representation of type theory is needed for metaprogramming and mechanised metatheory.
%
More philosophically, if type theory is supposed to be a general constructive foundation of mathematics, then it should in particular be able to reason about its own syntax and semantics (up to inherent limitations due to G\"odel's Incompleteness Theorems, of course).
%
In dependent type theory, types can depend on terms, which means that all of contexts, types and terms need to be defined simultaneously.
%
This is one reason why formalising type theory in type theory is hard.
%

\LT[noinline]{Is this just Pollack or McKinna \& Pollack?}
Early approaches to formalising type theory (see e.g. McKinna and Pollack~\cite{McKinna1999}) dealt with untyped terms that were later refined by a typing relation, or used setoid equality, and hence had to prove a lot of congruence lemmas by hand~\cite{Danielsson2006,Chapman2009}.
%
A breakthough was achieved by Altenkirch and Kaposi~\cite{Altenkirch2016a}, who showed that quotient inductive-inductive types (QIITs)~\cite{Altenkirch2018} can be employed to significantly simplify the internal representation of well typed terms, since equality constructors can be used to represent equations such as $\beta$- and $\eta$-equality.
%
Altenkirch and Kaposi took Dybjer's notion of a model of type theory in the form of a Category with Families~\cite{Dybjer1996}, and translated it into a QIIT definition.
%
In effect, this gives rise to the \emph{initial} Category with Families, with the elimination principles of the QIIT giving a unique morphism of Categories with Families to any other model.
%
This thus gives a both principled and practical way to formalise the syntax and dynamic semantics of type theory in type theory; the feasibility of the approach was demonstrated by e.g.\ implementing normalisation by evaluation using this representation~\cite{Altenkirch2017}.

However, QIIT definitions are still cumbersome to work with, since the type of later constructors or even equations often only make sense because of earlier equations.
%
In an intensional type theory, such as those implemented in proof assistants, this manifests itself in transport terms across equality proofs inside other terms, and leads to so-called ``transport hell'' --- rather than just reasoning about the terms you actually want to study, you now also have to do a lot of reasoning about transports themselves and their algebraic properties.
%
We are interested in ways of reducing transport hell, in order to make formalisations of type theory in type theory more lightweight and feasible.

In this paper, we report on an attempt to simplify such formalisations.
%
Our starting point is the idea of viewing Altenkirch and Kaposi's QIIT definition as the initial Category with Families.
%
The framework of Categories with Families is only one of several (more or less) equivalent notions of models of type theory~\cite{Hofmann1997}, and we were wondering if any of the other notions might offer any advantages.
%
Bense~\cite{Bense2024} suggested that Awodey's notion of \emph{natural model}~\cite{Awodey2018} might be a good candidate.
%
Indeed, in a natural model, the indexing of terms over their types $\mathsf{Tm} : \mathsf{Ty}(\Gamma) \to \mathsf{Set}$ (as in a Category with Families) is replaced by a ``fibred'' perspective where each term instead \emph{has} a type, as picked out by a function $\mathsf{tyOf} : \mathsf{Tm}(\Gamma) \to \mathsf{Ty}(\Gamma)$.
%
Terms and types are still indexed by contexts $\Gamma$, but since most ``type mismatches'' arise from equations between types, not equations between contexts (indeed many formulations of type theory does not even have a notion of context equality), this should mean that many uses of transports can be avoided.

We test this hypothesis by formalising type theory in a form inspired by natural models in the proof assistant Cubical Agda~\cite{Vezzosi2021}.
%
Cubical Agda is a good fit for such a project, because not only does it support QIITs, it also supports inductive-recursive types~\cite{Dybjer1999}, which are needed to simultaneously define the recursive $\mathsf{tyOf}$ function together with the inductively defined types $\mathsf{Tm}(\Gamma)$ and $\mathsf{Ty}(\Gamma)$.
%
Indeed, it could be the lack of support for inductive-recursive definitions in many proof assistants which has held back formalisation attempts based on natural models so far.

While we manage to avoid many transports occurring in terms, the experiment is not an outright success.
%
Indeed, we found that when developing more sophisticated metatheory, such as when defining a logical predicates model, the use of transports along equations often reappeared.
%
Furthermore, we found that the use of natural models is less well supported in the Cubical Agda of today, compared to approaches based purely on QIITs.
%
This is because we are more reliant on the computational behaviour of the recursively defined $\mathsf{tyOf}$ function, and this behaviour is only available in ``later'' clauses, which leads to the need for hacks and tricks to work around this limitation.
%
We discuss proof assistant features and their helpfulness further towards the end of the paper, after presenting our formalisation.

\paragraph{Contributions} We make the following contributions:
\begin{itemize}
\item We present an intrinsically well typed representation of the syntax of type theory, inspired by Awodey's natural models (\cref{sec:tt}).
\item We derive elimination and recursion principles for the syntax (\cref{sec:tt:elim}), and show how it can be used to construct the standard model and the term model (\cref{sec:standard-model}).
\item We discuss strictification constructions on models, and show that they also apply to our notion of natural models (\cref{sec:strictify}).
\item We develop normalisation by evaluation for the substitution calculus phrased as a natural model (\cref{sec:nbe}); because our development is carried out in Cubical Agda, which has a computational implementation of QIITs and principles such as function extensionality, the resulting normaliser computes, and can be used to normalise terms.
\item We discuss pros and cons of our approach compared to other approaches, and which proof assistant features would be helpful to make future formalisations easier (\cref{sec:compare}).
\end{itemize}

%\LT{the idea of using natural model appears at least in 2024 \cite{Bense2024}, and it is a natural idea to formalise type theory in this way.}
\section{Setting and metatheory}
% FNF (Sun 7 Sep)

Cubical Agda with UIP

QIIRTs

\LT{We give mutual definition modulo forward declarations and we will explain the trick in \Cref{sec:tt:mutual}.}
\LT{For brevity we have made arguments implicit for equality constructors, whereas some of them are actually explicit in our formalisation.}
\LT{We should give a simple example of QIRT here}

\section{Type theory as quotient inductive types} \label{sec:tt}
The main purpose of this section is to exhibit that Altenkirch and Kaposi's representation, which is not strictly positive per se and thus rejected by \CA, can be transformed to a representation based on Awodey's natural model, which is accepted by \CA.
Hence, we will begin with the Altenkirch and Kaposi's definition.
Then, we will derive a strictly positive representation as quotient inductive-inductive-recursive types (QIIRTs)  and show how other type formers can be represented in this way.
In the reminder of this section, we will give its elimination principle and explain how these definitions are formalised in \CA.

\subsection{Type theory as the initial CwF model}
\LT{CwF or cwf?}
In the QIIT representation~\cite{Altenkirch2016a}, each judgement is defined as an inductive type, each typing rule as a constructor, and each equality between types, terms, and substitutions as an \emph{equality constructor}.
The inhabitants of these types are valid derivations in type theory, because their validity is enforced by typing constraints.
Previously, \Agda did not natively support equality constructors, so a workaround known as `Licata's trick'~\cite{Licata2011} was used, which meant giving up many features of the proof assistant.
With \CA now equipped with the support for quotient inductive-inductive types, it is natural to ask if we can use this support to define type theory.

We briefly recall the representation given by Altenkirch and Kaposi as follows.
Those four types of judgements in type theory are represented inductive-inductively as
\begin{code}
data Ctx : Set
data Sub : (Γ Δ  : Ctx)  → Set
data Ty  : (Γ    : Ctx)  → Set
data Tm  : (Γ    : Ctx)  → Ty Γ → Set
\end{code}
and indexed by their context and by their types for terms.
For example, an inhabitant |t : Tm Γ A| represents a derivation for a term of type $A$ under the context |Γ|.
Rules are represented by constructors of these inductive types:
\begin{code}
data _ where
  ∅     : Ctx
  _,_   : (Γ : Ctx)(A : Ty Γ) → Ctx
  _[_]  : (A : Ty Δ)(σ : Sub Γ Δ) → Ty Γ
  _[_]  : (t : Tm Δ A)(σ : Sub Γ Δ) → Tm Γ (A [ σ ]T)
  _∘_   : Sub Δ Θ → Sub Γ Δ → Sub Γ Θ
  _,_   : (σ : Sub Γ Δ)(t : Tm Γ (A [ σ ]T))
        → Sub Γ (Δ , A)
  [∘]   : A [ τ ] [ σ ] ≡ A [ τ ∘ σ ]
  ...
\end{code}
Here, |_∘_| is the constructor for substitution composition, and the second |_,_| is the constructor for extending a substitution |σ| with a term |t| of type |A [ σ ]|.
The equality constructor~|[∘]| represents the rule that the type substitution for a composition |τ ∘ σ| is equal to a type substitution |τ| followed by another |σ|.
When formulating the corresponding rule for the interaction between |_∘_| and |_,_|, we encounter a type mismatch that must be resolved by transport, leading to the transport hell:  
\begin{code}
  ,∘   : (σ : Sub Δ Θ) (t : Tm Δ (A [ σ ]T)) (τ : Sub Γ Δ)
       → (σ , t) ∘ τ ≡ (σ ∘ τ , 
            subst (Tm Γ) ([∘] A τ σ) (t [ τ ]t))
\end{code}
The issue is that the type of |t [ τ ]| is |A [ σ ] [ τ ]| rather than the required |A [ σ ∘ τ ]|.
Moreover, since |Tm| appears as an argument to |subst|, the use of transport violates the syntactic restriction: strict positivity check.  
In other words, the transport hell is not only an obstacle for reasoning but also breaks strict positivity when arising in inductive definitions themselves.
The situation worsens once additional type formers are introduced---such as $\Pi$-types and the type |El| of elements~\cite{Altenkirch2016a}---since each brings further instances of this problem.  

On the other hand, another source of transports arises from equations over equations, but this can be avoided by using dependent paths.
For example, the fact that the identity term substitution really acts as an identity is introduced as an equality constructor |[idS]t|, defined over the equality constructor |[idS]| for the identity type substitution:  
\begin{code}
[idS]T : A ≡ A [ idS ]
[idS]t : PathP (λ i → Tm Γ ([idS]T i)) t (t [ idS ])
\end{code}
Although equations over equations are in principle more manageable, it quickly leads us to \emph{equations over equations over yet more equations} in their elimination rules.  
It is still preferable to avoid them if possible, provided that doing so does not make the formalisation more difficult.  

Of course, one could bypass these difficulties by ignoring the strict positivity check, but doing so would undermine the trustworthiness of the formalisation.
Another possibility is to relax the syntactic restriction in the presence of equality constructors, but it is unclear what conditions should be.
Therefore, we seek for an equivalent but strictly positive definition instead. 

\subsection{Fordism and the index elimination} \label{sec:tt:terms-without-indices}
To avoid the transport hell in the definition itself, we note that the index |A| of |Tm Γ A| is rigid under operations on types, such as substitutions.
Since we often need to provide an explicit proof for the typing constraints that, for example, the term |t| in the substitution |(σ , t)| has type |A [ σ ]| whenever this does not hold strictly, enforcing this constraint in the index of |Tm| just shoots ourselves in the foot. 
Hence, we apply `Fordism' transformation~\cite{McBride1999} to change the constraint on its index to its argument as an equality proof:
\begin{code}
_,_∶[_] : (σ : Sub Γ Δ) (t : Tm Γ B) (t : B ≡ A [ σ ])
\end{code}
Then, the constructor |,∘| becomes accordingly
\begin{code}
,∘ : (σ , t ∶[ p ]) ∘ τ ≡ (σ ∘ τ , t [ τ ]
        ∶[ cong _[ τ ] p ∙ ([∘]T A τ σ) ])
\end{code}
where |_∙_| is the transitivity of equality.
Although transport is not needed this time, the use of |cong| and |_∙_|
still prevent the definition from being strictly positive.
Similar to the Fordism transformation, this problem can be overcome by asking for another equality proof as an argument:
\begin{code}
,∘ : (σ : Sub Δ Θ) (t : Tm Δ B) (τ : Sub Γ Δ)
   → (p : B ≡ A [ σ ]) (q : B [ τ ] ≡ A [ σ ∘ τ ])
   → (σ , t ∶[ p ]) ∘ τ ≡ (σ ∘ τ) , t [ τ ] ∶[ q ]
\end{code}
As we assume UIP, the additional argument is essentially unique, so this updated constructor does not require any information but only defers the proof obligation.
This redundant argument can be removed later when defining its eliminator (\Cref{sec:tt:elim}).

Once the Fordism transformation has been applied, the index |B| in |Tm Γ B| no longer plays the role of enforcing constraints.
This opens the door to a simpler design: instead of carrying the index around, we can transform all |Tm| constructors uniformly and remove the index entirely.
To preserve the necessary typing information, we simultaneously introduce an auxiliary function |tyOf : Tm Γ → Ty Γ| that records it explicitly.
In the end, the constructor |,∘| becomes
\begin{code}
,∘ : (σ : Sub Δ Θ) (t : Tm Δ) (τ : Sub Γ Δ)
   → (p : tyOf t ≡ A [ σ ]) (q : tyOf t [ τ ] ≡ A [ σ ∘ τ ])
   → (σ , t ∶[ p ]) ∘ τ ≡ (σ ∘ τ) , t [ τ ] ∶[ q ]
\end{code}

As a side effect, this approach also removes the need for dependent paths in the definition.
Two terms can now be compared even when it is not known in advance whether their types are equal.
For instance, the equality constructor for the identity substitution becomes
\begin{code}
  [idS]t  : t ≡ t [ idS ]
\end{code}
where the fact that |t| and |t [ idS ]| share the same type follows from their term equality, rather than being imposed as a \emph{requirement}.

\subsection{Substitution calculus using QIIRT}
Building on the changes described in \Cref{sec:tt:terms-without-indices}, we now spell out substitution calculus of type theory.
That is, we define the following types together with a recursive function, simultaneously:
\begin{code}
data Ctx  :  Set
data Sub  :  (Γ Δ  : Ctx) → Set
data Ty   :  (Γ    : Ctx) → Set
data Tm   :  (Γ    : Ctx) → Set
tyOf : Tm Γ → Ty Γ
\end{code}
Similar to the QIIT representation, we introduce constructors for typing rules and equalities as follows:
\begin{code}
data _ where
  ∅        : Ctx
  _,_      : (Γ : Ctx)(A : Ty Γ) → Ctx
  _[_]     : (A : Ty Δ)(σ : Sub Γ Δ) → Ty Γ
  _[_]     : (A : Tm Δ)(σ : Sub Γ Δ) → Tm Γ
  ∅        : Sub Γ ∅
  _,_∶[_]  : (σ : Sub Γ Δ) (t : Tm Γ) (pt : tyOf t ≡ A [ σ ])
    → Sub Γ (Δ , A)
  idS      : Sub Γ Γ
  _∘_      : Sub Δ Θ → Sub Γ Δ → Sub Γ Θ
  π₁       : Sub Γ (Δ , A) → Sub Γ Δ
  π₂       : Sub Γ (Δ , A) → Tm Γ
  idS∘_    : idS ∘ σ ≡ σ
  _∘idS    : σ ∘ idS ≡ σ
  assocS   : (γ ∘ τ) ∘ σ ≡ γ ∘ (τ ∘ σ)
  [idS]T   : A  ≡  A  [ idS ]
  [idS]t   : t  ≡  t  [ idS ]
  [∘]T     : A  [ τ ]  [ σ ]  ≡ A  [ τ ∘ σ ]
  [∘]t     : t  [ τ ]  [ σ ]  ≡ t  [ τ ∘ σ ]
  ,∘       : (q : tyOf (t [ τ ]) ≡ A [ σ ∘ τ ])
    → (σ , t ∶[ pt ]) ∘ τ ≡ (σ ∘ τ , t [ τ ] ∶[ q ])
\end{code}
... except that we have to interleave the function clauses of |tyOf| with constructors.
For example, we have to give the function clause for |π₂ σ| before the $\eta$-law for substitution:
\begin{code}
tyOf (π₂ {Γ} {Δ} {A} σ)   = A [ π₁ σ ]
data _ where
  ηπ : σ ≡ (π₁ σ , π₂ σ ∶[ refl ])
\end{code}
Otherwise, the proof obligation |tyOf (π₂ σ) ≡ A [ π₁ σ ]| on the right hand side of |ηπ| cannot be fulfilled definitionally by |refl|.
We proceed with other equality constructors:
\begin{code}
data _ where
  η∅       : σ ≡ ∅S
  βπ₁      : π₁ (σ , t ∶[ p ]) ≡ σ
  βπ₂      : (q : A [ π₁ (σ , t ∶[ p ]) ]T ≡ tyOf t)
           → π₂ (σ , t ∶[ p ]) ≡ t
\end{code}
Note that |βπ₂| has an additional derivable equality proof.
This argument is needed as the coherence condition for
\begin{code}
tyOf (βπ₂ σ t p q i)  = q i
\end{code}
since again using any other function while defining inductive types breaks the strict positivity check. 
The remaining clauses are given as
\begin{code}
tyOf (t [ σ ])        = (tyOf t) [ σ ]
tyOf ([idS]t t i)     = [idS]T i
tyOf ([∘]t t σ τ i)   = [∘]T i
\end{code}
This definition of type theory is accepted by \CA\footnote{At the time of writing, \CA does not support interleaved mutual definitions, but it can be equivalently defined using forward declarations.
We will discuss this idiom in \Cref{sec:tt:mutual}.}
without any complains. 
Although |Tm| is only indexed by |Γ : Ctx|, the function |tyOf| ensures that every term has a type.
Hence, |Tm Γ| still consists of valid derivations only and is thus an intrinsic representation of type theory.

Replacing the index |A : Ty| of |Tm| with a function |tyOf : Tm Γ → Ty Γ| aligns with Awodey's notion of \emph{natural model}~\cite{Awodey2018} where the collections of terms and types are represented as presheaves $\mathsf{Tm}, \mathsf{Ty} \colon \mathbb{C} \to \Set$ over the category of contexts $\mathbb{C}$ and connected by a natural transformation $\mathsf{Tm} \to \mathsf{Ty}$ stable under pullbacks, i.e.\ substitution.
That is, we have just defined the initial natural model using QIIRT in \CA.
This coincidence situates our family of inductive types and their algebras within a well-studied categorical models for type theory.

\subsection{Type theory with the $\Pi$-type}

We proceed with the introduction of the $\Pi$-type.
First we define the lifting of a substitution by a type:
\begin{code}
_↑_ : (σ : Sub Γ Δ) (A : Ty Δ)
  → Sub (Γ , A [ σ ]) (Δ , A)
_↑_ {Γ} σ A = σ ∘ π₁ {Γ , A [ σ ]} idS
  , π₂ (idS {Γ , A [ σ ]}) ∶[ p ]
\end{code}
where |p : tyOf (π₂ idS) ≡ A [ σ ∘ π₁ idS ]|.
We may be tempted to use |[∘]T| to define |p|, as |tyOf (π₂ (idS {Γ , A [ σ ]}))| is equal to |A [ σ ] [ π₁ idS ]| by definition.
Yet, again, we must refrain ourself from doing so during defining inductive types, so we introduce a superfluous equality constructor
\begin{code}
data _ where
  tyOfπ₂idS : tyOf (π₂ {A = A [ σ ]T} idS)
    ≡ A [ σ ∘ π₁ idS ]T
\end{code}
which can be identified with the proof derivable from |[∘]T| by the UIP after all.

Then, other constructors for the $\Pi$-type are introduced following the Fordism:
\begin{code} 
data _ where
  Π      : (A : Ty Γ) (B : Ty (Γ , A)) → Ty Γ
  app    : (t : Tm Γ) (B : Ty (Γ , A)) (pt : tyOf t ≡ Π A B)
    → Tm (Γ , A)
  abs    : (t : Tm (Γ , A)) → Tm Γ
  Π[]    : (Π A B) [ σ ] ≡ Π (A [ σ ]) (B [ σ ↑ A ])
  abs[]  : abs t [ σ ] ≡ abs (t [ σ ↑ A ])
  Πβ     : app (abs t) (tyOf t) pt ≡ t
  Πη     : abs (app t B pt) ≡ t

tyOf (app t B p)      = B
tyOf (abs {A = A} t)  = Π A (tyOf t)
tyOf (abs[] σ t i)    = Π[] σ (tyOf t) i
tyOf (Πβ t pt i)      = tyOf t
tyOf (Πη t pt i)      = pt (~ i)
\end{code}

Apart from the extra clauses of |tyOf|, the only change happens in the constructor |app|.
The constraint that |t| is of type |Π A B| is enforced there, but every other constructor remains as the same as their original QIIT definition.
\LT{any example?}
\subsection{Type theory with the type of Booleans}

The introduction of an inductive type of Booleans also needs a special care of the substitution lifting, but let us look at the easy part first.
\begin{code}
data _ where
  𝔹      : Ty Γ
  𝔹[]    : 𝔹 [ σ ] ≡ 𝔹
  tt ff  : Tm Γ
  tt[]   : tt [ σ ] ≡ tt
  ff[]   : ff [ σ ] ≡ ff
  elim𝔹  : (P : Ty (Γ , 𝔹))
    (t : Tm Γ)  (pt  : tyOf t  ≡ P  [ idS , tt ∶[ [idS]T ] ])
    (u : Tm Γ)  (pu  : tyOf u  ≡ P  [ idS , ff ∶[ [idS]T ] ])
    (b : Tm Γ)  (pb  : tyOf b  ≡ 𝔹  [ idS ]) → Tm Γ

tyOf tt  = 𝔹
tyOf ff  = 𝔹
tyOf (tt[] σ i)  = 𝔹[] σ i
tyOf (ff[] σ i)  = 𝔹[] σ i
tyOf (elim𝔹 P u t pu pt b pb) = P [ idS , b ∶[ pb ] ]T
\end{code}
The only thing missing from the above definition is the substitution rule for |elim𝔹|:
applying the substitution |σ| to `|elim𝔹 P t pt u pu b pb|' is equal to applying a lifted substitution  |σ ↑ 𝔹| to |P| and |σ| to |t|, |u|, and |b|.
However, |P [ σ ↑ 𝔹 ]| gives us a type in the context |Δ , 𝔹 [ σ ]| instead of |Δ , 𝔹|, we provide a lifting specialised for |𝔹| with a type |Sub Γ Δ → Sub (Γ , 𝔹) (Δ , 𝔹)| and also a superfluous equality constructor |𝔹[]₂| to satisfy its proof obligation:
\begin{code}
data _ where
  𝔹[]₂   : tyOf (π₂ {Γ , 𝔹} idS) ≡ 𝔹 [ τ ]

_↑𝔹 : (σ : Sub Γ Δ) → Sub (Γ , 𝔹) (Δ , 𝔹)
_↑𝔹 {Γ} {Δ} σ = σ ∘ π₁ {Γ , 𝔹} idS , π₂ idS ∶[ 𝔹[]₂ ] 
\end{code}

Finally, we introduce the equality constructor for |elim𝔹|:
\begin{code}
data _ where
  elim𝔹[] : ...
    (pt₂  : tyOf (t  [ σ ])  ≡ P  [ σ ↑𝔹 ]  [ idS , tt ∶[ [idS]T ] ])
    (pu₂  : tyOf (u  [ σ ])  ≡ P  [ σ ↑𝔹 ]  [ idS , ff ∶[ [idS]T ] ])
    (pb₂  : tyOf (b  [ σ ])  ≡ 𝔹  [ idS ])
    → (q : P [ idS , b ∶[ pb ] ] [ σ ]
    ≡  P [ σ ∘ wk , vz ∶[ 𝔹[]₂ ] ] [ idS , b [ σ ]t ∶[ pb₂ ] ])
    → (elim𝔹 P t pt u pu b pb) [ σ ]
    ≡ elim𝔹 (P [ σ ↑𝔹 ]) (t [ σ ]) pt₂ (u [ σ ]) pu₂
        (b [ σ ]) pb₂

tyOf (elim𝔹[] P u t pu pt b pb pt₂ pu₂ pb₂ q i) = q i
\end{code}
Note again that we also defer the coherence proof of |tyOf| for |elim𝔹[]| by introducing another argument |q| in |elim𝔹| which can be removed when defining its elimination rule.
\LT{Remember to explain how the argument |q| is addressed.}
\subsection{Type theory with a Tarski universe}
Using the same idiom described previously, a Tarski universe of types is introduced to our type theory routinely.
First we need |U : Ty Γ| for the type of code and a type former |El| for the type of elements:
\begin{code}
data _ where
  U     : Ty Γ
  U[]   : U [ σ ]T ≡ U
  El    : (u : Tm Γ) (pu : tyOf u ≡ U) → Ty Γ
  El[]  : (q : tyOf (u [ τ ]t) ≡ U)
    → (El u pu) [ τ ]T ≡ El (u [ τ ]t) q
\end{code}

For the type |𝔹| of Boolean, its code |𝕓| is introduced with a type equality |El𝕓| such that the elements of |𝕓| is exactly |𝔹|:
\begin{code}
data _ where
  𝕓     : Tm Γ
  𝕓[]   : 𝕓 [ σ ]t ≡ 𝕓

tyOf 𝕓 = U
tyOf (𝕓[] σ i) = U[] {σ = σ} i

data _ where
  El𝕓 : El {Γ} 𝕓 refl ≡ 𝔹
\end{code}

For the |Π|-type, we again require a specialised substitution lifting.
This continues the pattern of introducing helper definitions to satisfy proof obligations definitionally within the QIIRT.
We add a superfluous equality constructor |El[]₂| for this purpose:
\begin{code}
data _ where
  El[]₂ : (u : Tm Δ) (pu : tyOf u ≡ U)
    → (pu₂ : tyOf (u [ σ ]) ≡ U)
    → tyOf (π₂ {Γ , El (u [ σ ]) pu₂} idS)
    ≡ El u pu [ σ ∘ π₁ idS ]

_↑El : (σ : Sub Γ Δ) {u : Tm Δ}
  {pu : tyOf u ≡ U} {pu' : tyOf (u [ σ ]) ≡ U}
  → Sub (Γ , El (u [ σ ]) pu') (Δ , El u pu)
(σ ↑El) {u} {pu} {pu'} =
  σ ∘ π₁ idS , π₂ idS ∶[ El[]₂ u pu pu' ]
\end{code}

Finally, we introduce the code |π| for |Π| and the type equality |Elπ| to complete our definition of type theory using QIIRT:
\begin{code}
data _ where
  π    :  (a : Tm Γ) (pa : tyOf a ≡ U)
          (b : Tm (Γ , El a pa)) (pb : tyOf b ≡ U) → Tm Γ
  π[]  :  (a : Tm Γ)              (pa : tyOf a ≡ U)
       →  (b : Tm (Γ , El a pa))  (pb : tyOf b ≡ U)
       →  (pa' : tyOf (a [ σ ]t)      ≡ U)
       →  (pb' : tyOf (b [ σ ↑El ]t)  ≡ U)
       →  (π a pa b pb) [ σ ]t
       ≡  π (a [ σ ]t) pa' (b [ σ ↑El ]t) pb'

tyOf (π _ _ _ _) = U

data _ where
  Elπ : (a : Tm Γ) (pa : tyOf a ≡ U)
    → (b : Tm (Γ , El a pa)) (pb : tyOf b ≡ U)
    → El (π a pa b pb) refl ≡ Π (El a pa) (El b pb)

tyOf (π[] _ _ _ _ _ _ i) = U[] i
\end{code}

In the end, we emphasise that the introduction of additional equality proofs and constructors only makes sense under the assumption of UIP. 
With UIP, these additional arguments are essentially unique and thus do not add any new information to the subject of study, but merely serve as devices to meet the syntactic restriction of strict positivity.

\subsection{Recursion and elimination principles} \label{sec:tt:elim}
We turn to the recursion and elimination principles.
Our QIIRT definition of type theory syntax yields an \emph{initial model}.
This means that for any other model (algebra) of our theory, there is a unique structure-preserving map from our syntax to that model.
The recursion and elimination principles make this property concrete.
Here, we only discuss the part for substitution calculus, since other type formers are addressed similarly.
For the interested reader, see our formalisation.

The signature for an algebra, which we can think of as a semantic model, is captured by a record type |SC|.
Inductive types and the recursion function |tyOf| are fields of indexed sets and a function between sets. 
Constructor of our syntax, except superfluous ones, correspond to function fields in this record, including equality constructors and clauses of |tyOf|.
\begin{code}
record SC  : Set₁  where
  field
    Ctx     : Set
    Ty      : Ctx → Set
    Sub     : Ctx → Ctx → Set
    Tm      : Ctx → Set
    tyOf    : {Γ : Ctx} → Tm Γ → Ty Γ

    ∅       : Ctx
    _,C_    : (Γ : Ctx)(A : Ty Γ) → Ctx
    _[_]T   : (A : Ty Δ)(σ : Sub Γ Δ) → Ty Γ
    _[_]t   : (t : Tm Δ)(σ : Sub Γ Δ) → Tm Γ
    idS∘_   : idS ∘ σ ≡ σ
    ...
    tyOf[]  : tyOf (t [ σ ]t)      ≡ (tyOf t) [ σ ]T
    tyOfπ₂  : tyOf (π₂ {A = A} σ)  ≡ A [ π₁ σ ]T
\end{code}

To distinguish syntactic constructors from the semantic methods in |SC|, we qualify the syntactic constructors with |S.| in the following discussion.

Those superfluous equality constructors, like |S.tyOfπ₂idS|, are not required as fields in the record.
Instead, their semantic counterparts are defined within any given model using the other methods.
For example,
\begin{code}
  tyOfπ₂idS : (σ : Sub Γ Δ) (A : Ty Δ)
    → tyOf (π₂ {A = A [ σ ]T} idS) ≡ A [ σ ∘ π₁ idS ]T
  tyOfπ₂idS σ A = tyOfπ₂ idS ∙ [∘]T _ _ _
\end{code}
This simplifies the definition of models, as we only need to provide interpretations for the essential constructors.

The recursion principle itself consists of a family of functions that map syntax to their semantic counterparts in a given |SC|-algebra:
\begin{code}
recCtx   : S.Ctx → Ctx
recTy    : S.Ty Γ → Ty (recCtx Γ)
recTm    : S.Tm Γ → Tm (recCtx Γ)
recSub   : S.Sub Γ Δ → Sub (recCtx Γ) (recCtx Δ)
\end{code}
We also need a function that translates proofs about syntactic types into proofs about semantic types:
\begin{code}
recTyOf  : S.tyOf t ≡ B → tyOf (recTm t) ≡ recTy B
\end{code}
The definition of these functions proceeds by pattern matching on the syntactic structure.
Each clause is a straightforward application of the corresponding method from the |SC| record:
\begin{code}
recCtx S.∅                = ∅
recCtx (Γ S., A)          = recCtx Γ ,C recTy A
...
recSub (σ S., t ∶[ pt ])  = recSub σ , recTm t ∶[ recTyOf t pt ]
...
\end{code}
The most interesting case is perhaps |recTyOf|, which handles the translation of syntactic equations.
For a given syntactic equality proof |p : S.tyOf t ≡ B|, we must construct a semantic equality proof.
This is done by applying |recTy| to both sides of the syntactic equality to get |recTy (S.tyOf t) ≡ recTy B|, and then using the semantic counterpart of the |tyOf| clause to derive |tyOf (recTm t) ≡ recTy (S.tyOf t)|.
Taking |S.π₂| as an example, we have:
\begin{code}
recTyOf {B = B} (S.π₂ {A = A} σ) p =
  tyOf (recTm (S.π₂ σ))       ≡⟨⟩
  tyOf (π₂ (recSub σ))        ≡⟨ tyOfπ₂ (recSub σ) ⟩
  recTy A [ π₁ (recSub σ) ]T  ≡⟨⟩
  recTy (S.tyOf (S.π₂ σ))     ≡⟨ cong recTy p ⟩
  recTy B                     ∎
\end{code}
The coherence conditions for |recTyOf| over equations between equations are trivial because of the UIP.

\subsection{Interleaved mutual definition}  \label{sec:tt:mutual}
\section{Metatheory}
\label{sec:strictify}
\subsection{Strictification}

% LTC (Tue 9 Sep)
% \input{meta.agda.tex}

\label{sec:standard-model}
\label{sec:nbe}


\section{Comparison with other approaches}
\label{sec:compare}
% FNF (Tue 9 Sep)

Compared to QIIT:

\begin{itemize}
\item Fewer transports in the syntax, but they tend to come back in concrete models
\item Strictification orthogonal

Even the strictification technique~\cite{Kaposi2025}, which turn most of equality constructors about substitution to strict equalities, cannot help, as it can only be applied \emph{after} the inductive types are defined.
\end{itemize}

Compared to untyped version:
\begin{itemize}
\item Untyped version might still be easiest to work with, with current proof assistant technology
\end{itemize}

\section{Discussion}
% LTC (at first)

\begin{itemize}
  \item General translation from QIIT to QIIRT: Fordism translation and the index elimination
(theory of ornaments~\cite{Ko2016,Dagand2017})

  \item Practical considerations (eg NBE computes, support for interleaved mutual definitions)
  \item Eliminating indices entirely in a metatheory with definitional UIP (e.g., XTT~\cite{Sterling2022}) should work fine without a strict prop.

  \item Safety guarantees from proof assistant (e.g. strict positivity check, termination check, coverage check)
  \item Easier in OTT-based proof assistant
\end{itemize}

\IfFileExists{./reference.bib}{\bibliography{reference}}{\bibliography{ref}}
%\bibliography{ref}

\end{document}


%\begin{acks}
%To Robert, for the bagels and explaining CMYK and color spaces.
%\end{acks}
