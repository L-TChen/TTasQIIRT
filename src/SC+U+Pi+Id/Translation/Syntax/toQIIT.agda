open import Prelude
-- copy and modify from Theory
module SC+U+Pi+Id.Translation.Syntax.toQIIT where

open import SC+U+Pi+Id.QIIT.Syntax
open import SC+U+Pi+Id.QIIT.Properties
open import SC+U+Pi+Id.Recursion.Rec

open Recursor

toQIIT : Recursor
toQIIT .mot = record
  { Ctx·¥π = Ctx
  ; Ty·¥π  = Ty
  ; Sub·¥π = Sub
  ; Tm·¥π  = Tm
  }
toQIIT .met = record
  { ùíû    = record
    { C‚ÇÅ = record
      { [_]·¥π_       = [_]_
      ; ‚àÖ·∂ú·¥π         = ‚àÖ
      ; _,·∂ú·¥π_       = _,_
      ; ‚àÖÀ¢·¥π         = ‚àÖ
      ; _,À¢·¥π_       = _,_
      ; idS·¥π        = idS
      ; _‚®ü·¥π_        = _‚®ü_
      ; œÄ‚ÇÅ·¥π         = œÄ‚ÇÅ
      ; [idS·¥π]      = [idS]
      ; [‚®ü·¥π]·¥π       = [‚®ü]
      ; œÄ‚ÇÇ·¥π         = œÄ‚ÇÇ
      ; [_]tm·¥π_     = [_]tm_
      }
    ; C‚ÇÇ = record
      { _‚®ü·¥πidS·¥π     = _‚®üidS
      ; idS·¥π‚®ü·¥π_     = idS‚®ü_
      ; ‚®ü·¥π-assoc    = ‚®ü-assoc
      ; œÄ‚ÇÅ·¥π,À¢·¥π      = œÄ‚ÇÅ,
      ; ‚®ü·¥π,À¢·¥π       = ‚®ü,
      ; Œ∑‚àÖÀ¢·¥π        = Œ∑‚àÖ
      ; Œ∑,À¢·¥π        = Œ∑,
      ; [idS·¥π]tm·¥π   = [idS]tm
      ; [‚®ü·¥π]tm·¥π     = [‚®ü]tm
      ; œÄ‚ÇÇ·¥π,À¢·¥π      = œÄ‚ÇÇ,
      }
    }
  ; univ = record
    { U·¥π       = U
    ; El·¥π      = El
    ; Lift·¥π    = Lift
    ; c·¥π       = c
    ; mk·¥π      = mk
    ; un·¥π      = un
    ; []·¥πU·¥π    = []U
    ; []·¥πEl·¥π   = []El
    ; []·¥πLift·¥π = []Lift
    ; []t·¥πc·¥π   = []tc
    ; []mk·¥π    = []mk
    ; []un·¥π    = []un
    ; U·¥πŒ≤      = UŒ≤
    ; U·¥πŒ∑      = UŒ∑
    ; Lift·¥πŒ≤   = LiftŒ≤
    ; Lift·¥πŒ∑   = LiftŒ∑
    }
  ; piTy = record
    { Œ†·¥π    = Œ†
    ; ∆õ·¥π_   = ∆õ_
    ; app·¥π  = app
    ; []·¥πŒ†·¥π = []Œ†
    ; []∆õ·¥π  = []∆õ
    ; Œ†Œ≤·¥π   = Œ†Œ≤
    ; Œ†Œ∑·¥π   = Œ†Œ∑
    }
  ; idTy = record
    { Id·¥π      = Id
    ; []·¥πId·¥π   = []Id
    ; reflect·¥π = reflect
    }
  }