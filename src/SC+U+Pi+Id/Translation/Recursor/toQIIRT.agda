{-# OPTIONS --allow-unsolved-metas #-}
open import Prelude

module SC+U+Pi+Id.Translation.Recursor.toQIIRT where

open import SC+U+Pi+Id.QIIT.Syntax
open import SC+U+Pi+Id.QIIT.Properties
open import SC+U+Pi+Id.QIIT.Recursion

import SC+U+Pi+Id.QIIRT.Syntax as IR
  -- hiding (i) 
import SC+U+Pi+Id.QIIRT.Recursion as IR

module _  {‚Ñì ‚Ñì‚Ä≤}(rec : Recursor {‚Ñì} {‚Ñì‚Ä≤}) where
  open Recursor rec
  -- derived equalities of QIIT Recursor
  private
    variable
      Œì·¥π Œî·¥π Œò·¥π Œ¶·¥π : Ctx·¥π
      œÉ·¥π œÑ·¥π Œ≥·¥π    : Sub·¥π Œì·¥π Œî·¥π
      A·¥π B·¥π C·¥π    : Ty·¥π Œì·¥π i
      a·¥π t·¥π u·¥π    : Tm·¥π Œì·¥π A·¥π
    

  toQIIRT : IR.Recursor {‚Ñì} {‚Ñì‚Ä≤}
  toQIIRT .IR.Recursor.mot = record
    { Ctx·¥π = Ctx·¥π
    ; Ty·¥π  = Ty·¥π
    ; Sub·¥π = Sub·¥π
    ; Tm·¥π  = Tm·¥π
    }
  toQIIRT .IR.Recursor.met = record
    { ùíû = record
      { [_]·¥π_     = [_]·¥π_
      ; ‚àÖ·∂ú·¥π       = ‚àÖ·∂ú·¥π
      ; _,·∂ú·¥π_     = _,·∂ú·¥π_
      ; ‚àÖÀ¢·¥π       = ‚àÖÀ¢·¥π
      ; _,À¢·¥π_     = _,À¢·¥π_
      ; idS·¥π      = idS·¥π
      ; _‚®ü·¥π_      = _‚®ü·¥π_
      ; œÄ‚ÇÅ·¥π       = œÄ‚ÇÅ·¥π
      ; [idS]·¥π    = [idS]·¥π
      ; [‚®ü]·¥π      = [‚®ü]·¥π
      ; [œÄ‚ÇÅ,]·¥π    = Œª {_} {_} {œÉ·¥π} {_} {A'·¥π} {t·¥π} {_} {A·¥π}
                  ‚Üí cong ([_]·¥π A·¥π) œÄ‚ÇÅ,·¥π
      ; [œÄ‚ÇÅ‚®ü]·¥π    = Œª {_} {_} {œÉ·¥π} {_} {_} {_} {œÑ·¥π} {_} {A·¥π}
                  ‚Üí cong ([_]·¥π A·¥π) (œÄ‚ÇÅ‚®ü·¥π œÉ·¥π œÑ·¥π) ‚àô [‚®ü]·¥π
      ; œÄ‚ÇÇ·¥π       = œÄ‚ÇÇ·¥π
      ; [_]tm·¥π_   = [_]tm·¥π_
      ; _‚Üë·¥π_      = _‚Üë·¥π_
      ; idS‚Üë·¥π     = idS‚Üë·¥π
      ; ‚®ü‚Üë·¥π       = {!   !}
      ; œÄ‚ÇÅ,‚Üë·¥π     = œÄ‚ÇÅ,‚Üë·¥π
      ; œÄ‚ÇÅ‚®ü‚Üë·¥π     = {!   !}
      ; ‚àÖ‚Üë·¥π       = refl
      ; ,‚Üë·¥π       = refl
      ; œÄ‚ÇÅidS‚Üë·¥π   = refl
      ; œÄ‚ÇÅœÄ‚ÇÅ‚Üë·¥π    = refl
      ; [_]t·¥π_    = [_]tm·¥π_
      ; [idS]t·¥π   = [idS]tm·¥π
      ; [‚®ü]t·¥π     = [‚®ü]tm·¥π
      ; [œÄ‚ÇÅ,]t·¥π   = Œª {Œì·¥π} {Œî·¥π} {œÉ·¥π} {_} {_} {t·¥π} {_} {A·¥π} {u·¥π}
                  ‚Üí sym (tr-cong {P = Tm·¥πFam} œÄ‚ÇÅ,·¥π)
                  ‚àô tr-nat (Œª _ ‚Üí ‚ä§) (Œª œÑ·¥π _ ‚Üí [ œÑ·¥π ]tm·¥π u·¥π) œÄ‚ÇÅ,·¥π
      ; [œÄ‚ÇÅ‚®ü]t·¥π   = Œª {Œì·¥π} {Œî·¥π} {œÉ·¥π} {Œò·¥π} {_} {_} {œÑ·¥π} {_} {A·¥π} {t·¥π}
                  ‚Üí sym (tr¬≤ (cong ([_]·¥π A·¥π) (œÄ‚ÇÅ‚®ü·¥π œÉ·¥π œÑ·¥π)))
                  ‚àô cong (tr Tm·¥πFam [‚®ü]·¥π) (sym (tr-cong {P = Tm·¥πFam} (œÄ‚ÇÅ‚®ü·¥π œÉ·¥π œÑ·¥π)))
                  ‚àô cong (tr Tm·¥πFam [‚®ü]·¥π) (apd ([_]tm·¥π t·¥π) (œÄ‚ÇÅ‚®ü·¥π œÉ·¥π œÑ·¥π))
                  ‚àô [‚®ü]tm·¥π
      ; [‚àÖ]t·¥π     = refl
      ; [,]t·¥π     = refl
      ; [œÄ‚ÇÅidS]t·¥π = refl
      ; [œÄ‚ÇÅœÄ‚ÇÅ]t·¥π  = refl
      ; _‚®üidS·¥π    = _‚®üidS·¥π
      ; idS‚®ü·¥π_    = idS‚®ü·¥π_
      ; ‚®ü-assoc·¥π  = ‚®ü-assoc·¥π
      ; œÄ‚ÇÅ,·¥π      = œÄ‚ÇÅ,·¥π
      ; ‚®ü,·¥π       = ‚®ü,·¥π
      ; Œ∑‚àÖ·¥π       = Œ∑‚àÖ·¥π
      ; Œ∑,·¥π       = Œ∑,·¥π
      ; [idS]tm·¥π  = [idS]tm·¥π
      ; [‚®ü]tm·¥π    = [‚®ü]tm·¥π
      ; œÄ‚ÇÇ,·¥π      = Œª {Œì·¥π} {Œî·¥π} {œÉ·¥π} {_} {A·¥π} {t·¥π}
                  ‚Üí (sym $ tr-cong {P = Tm·¥πFam} œÄ‚ÇÅ,·¥π) ‚àô œÄ‚ÇÇ,·¥π
      }
    ; univ = record 
      { U·¥π      = U·¥π
      ; El·¥π     = El·¥π
      ; Lift·¥π   = Lift·¥π
      ; c·¥π      = c·¥π
      ; mk·¥π     = mk·¥π
      ; un·¥π     = un·¥π
      ; []U·¥π    = []U·¥π
      ; []El·¥π   = []El·¥π
      ; []Lift·¥π = []Lift·¥π
      ; []tc·¥π   = []tc·¥π
      ; []mk·¥π   = []mk·¥π
      ; []un·¥π   = []un·¥π
      ; UŒ≤·¥π     = UŒ≤·¥π
      ; UŒ∑·¥π     = UŒ∑·¥π
      ; LiftŒ≤·¥π  = LiftŒ≤·¥π
      ; LiftŒ∑·¥π  = LiftŒ∑·¥π
      }
    ; piTy = record
      { Œ†·¥π   = Œ†·¥π
      ; ∆õ·¥π_  = ∆õ·¥π_
      ; app·¥π = app·¥π
      ; []Œ†·¥π = []Œ†·¥π
      ; []∆õ·¥π = []∆õ·¥π
      ; Œ†Œ≤·¥π  = Œ†Œ≤·¥π
      ; Œ†Œ∑·¥π  = Œ†Œ∑·¥π
      }
    ; idTy = record
      { Id·¥π      = Id·¥π
      ; []Id·¥π    = []Id·¥π
      ; refl·¥π    = refl·¥π
      ; []refl·¥π  = []refl·¥π
      ; reflect·¥π = reflect·¥π
      }
    }
