open import Prelude
-- copy and modify from Theory
module SC+U+Pi+Id.Translation.Model.toQIIT where

open import SC+U+Pi+Id.QIIT.Syntax     as QIIT
open import SC+U+Pi+Id.QIIT.Properties as QIIT
open import SC+U+Pi+Id.QIIT.Elimination as QE

import SC+U+Pi+Id.QIIRT.Syntax as R
  hiding (i) 

import SC+U+Pi+Id.QIIRT.Elimination as RM

open ‚â°-Reasoning
module _ {‚Ñì ‚Ñì‚Ä≤}(QM : Eliminator {‚Ñì} {‚Ñì‚Ä≤}) where
  open Eliminator QM
  open import SC+U+Pi+Id.Translation.Syntax.Translate
  open QIIRT‚ÜíQIIT
  
  toQIIT : RM.Eliminator {‚Ñì} {‚Ñì‚Ä≤}
  toQIIT .RM.Eliminator.mot = record
    { Ctx·¥π = Œª Œì ‚Üí Ctx·¥π (Œì >c)
    ; Ty·¥π  = Œª Œì·¥π i A ‚Üí Ty·¥π Œì·¥π i (A >ty)
    ; Sub·¥π = Œª Œì·¥π Œî·¥π œÉ ‚Üí Sub·¥π Œì·¥π Œî·¥π (œÉ >s)
    ; Tm·¥π  = Œª Œì·¥π A·¥π t ‚Üí Tm·¥π Œì·¥π A·¥π (t >tm)
    }
  toQIIT .RM.Eliminator.met = record
    { ùíû    = record
      { [_]·¥π_       = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÉ} {i} {A} œÉ·¥π A·¥π ‚Üí tr Ty·¥πFam ([]>ty œÉ A) ([ œÉ·¥π ]·¥π A·¥π)
      ; ‚àÖ·∂ú·¥π         = ‚àÖ·∂ú·¥π
      ; _,·∂ú·¥π_       = _,·∂ú·¥π_
      ; ‚àÖÀ¢·¥π         = ‚àÖÀ¢·¥π
      ; _,À¢·¥π_       = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÉ} {_} {A} {A·¥π} {t} œÉ·¥π t·¥π
                    ‚Üí œÉ·¥π ,À¢·¥π
                      trTm·¥π‚Çú (sym $ []>ty œÉ A)
                                      (tr¬≤ ([]>ty œÉ A) ‚àô cong (Œª p ‚Üí tr Ty·¥πFam p ([ œÉ·¥π ]·¥π A·¥π)) (trans-sym ≥ ([]>ty œÉ A)))
                                      t·¥π
      ; idS·¥π        = idS·¥π
      ; _‚®ü·¥π_        = _‚®ü·¥π_
          -- Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÑ} {Œò} {Œò·¥π} {œÉ} œÑ·¥π œÉ·¥π ‚Üí œÑ·¥π ‚®ü·¥π œÉ·¥π
      ; œÄ‚ÇÅ·¥π         = œÄ‚ÇÅ·¥π
          -- Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {i} {A} {A·¥π} {œÉ} œÉ·¥π ‚Üí œÄ‚ÇÅ·¥π œÉ·¥π
      ; [idS·¥π]      = Œª {Œì} {Œì·¥π} {i} {A} {A·¥π}
                    ‚Üí cong (tr Ty·¥πFam ([]>ty R.idS A)) (flip [idS·¥π])
                    ‚àô tr¬≤ (sym [idS]) {[]>ty R.idS A}
                    ‚àô cong (Œª p ‚Üí tr Ty·¥πFam p A·¥π) (uip (sym [idS] ‚àô []>ty R.idS A) refl)
      ; [‚®ü·¥π]·¥π       = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÑ} {œÑ·¥π} {Œò} {Œò·¥π} {œÉ} {œÉ·¥π} {i} {A} {A·¥π}
                    ‚Üí cong (tr Ty·¥πFam ([]>ty (œÑ R.‚®ü œÉ) A)) (flip [‚®ü·¥π]·¥π)
                    ‚àô tr¬≤ (sym [‚®ü]) {[]>ty (œÑ R.‚®ü œÉ) A}
                    ‚àô cong (Œª p ‚Üí tr Ty·¥πFam p ([ œÑ·¥π ]·¥π ([ œÉ·¥π ]·¥π A·¥π)))
                           (uip (sym [‚®ü] ‚àô []>ty (œÑ R.‚®ü œÉ) A) (cong ([ œÑ >s ]_) ([]>ty œÉ A) ‚àô []>ty œÑ (R.[ œÉ ] A)))
                    ‚àô sym (
                      cong (tr Ty·¥πFam ([]>ty œÑ (R.[ œÉ ] A))) (sym $ tr-nat Ty·¥πFam (Œª _ x ‚Üí [ œÑ·¥π ]·¥π x) ([]>ty œÉ A))
                    ‚àô cong (tr Ty·¥πFam ([]>ty œÑ (R.[ œÉ ] A))) (tr-cong ([]>ty œÉ A))
                    ‚àô tr¬≤ (cong ([ œÑ >s ]_) ([]>ty œÉ A)) {[]>ty œÑ (R.[ œÉ ] A)}
                    )
      ; [œÄ‚ÇÅ·¥π,À¢·¥π]·¥π   = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÉ} {œÉ·¥π} {i} {A'} {t} {A'·¥π} {t·¥π} {j} {A} {A·¥π}
                    ‚Üí cong (tr Ty·¥πFam ([]>ty (R.œÄ‚ÇÅ (œÉ R., t)) A)) (flip $ [œÄ‚ÇÅ·¥π,À¢·¥π]·¥π œÉ·¥π (trTm·¥π‚Çú _ _ t·¥π) A·¥π)
                    ‚àô tr¬≤ (sym $ cong ([_] A >ty) œÄ‚ÇÅ,) {[]>ty (R.œÄ‚ÇÅ (œÉ R., t)) A}
                    ‚àô cong (Œª p ‚Üí tr Ty·¥πFam p ([ œÉ·¥π ]·¥π A·¥π))
                           (uip (sym (cong ([_] A >ty) œÄ‚ÇÅ,) ‚àô []>ty (R.œÄ‚ÇÅ (œÉ R., t)) A) ([]>ty œÉ A))
      ; [œÄ‚ÇÅ·¥π‚®ü·¥π]·¥π    = {!   !}
      ; œÄ‚ÇÇ·¥π         = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {i} {A} {A·¥π} {œÉ} œÉ·¥π
                    ‚Üí trTm·¥π‚Çú ([]>ty (R.œÄ‚ÇÅ œÉ) A) refl (œÄ‚ÇÇ·¥π œÉ·¥π)
      ; [_]tm·¥π_     = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÉ} {i} {A} {t} œÉ·¥π {A·¥π} t·¥π
                    ‚Üí trTm·¥π‚Çú ([]>ty œÉ A) refl ([ œÉ·¥π ]tm·¥π t·¥π)
      ; _‚Üë·¥π_        = {!   !}
      -- ; idS·¥π‚Üë·¥π      = {!   !}
      -- ; ‚®ü·¥π‚Üë·¥π        = {!   !}
      -- ; œÄ‚ÇÅ·¥π,À¢·¥π‚Üë·¥π    = {!   !}
      -- ; œÄ‚ÇÅ·¥π‚®ü·¥π‚Üë·¥π     = {!   !}
      -- ; ‚àÖÀ¢·¥π‚Üë·¥π       = {!   !}
      -- ; ,À¢·¥π‚Üë·¥π       = {!   !}
      -- ; œÄ‚ÇÅ·¥πidS·¥π‚Üë·¥π   = {!   !}
      -- ; œÄ‚ÇÅ·¥πœÄ‚ÇÅ·¥π‚Üë·¥π    = {!   !}
      -- ; [_]t·¥π_      = {!   !}
      -- ; [idS·¥π]t·¥π    = {!   !}
      -- ; [‚®ü·¥π]t·¥π      = {!   !}
      -- ; [œÄ‚ÇÅ·¥π,À¢·¥π]t·¥π  = {!   !}
      -- ; [œÄ‚ÇÅ·¥π‚®ü·¥π]t·¥π   = {!   !}
      -- ; [‚àÖÀ¢·¥π]t·¥π     = {!   !}
      -- ; [,À¢·¥π]t·¥π     = {!   !}
      -- ; [œÄ‚ÇÅ·¥πidS·¥π]t·¥π = {!   !}
      -- ; [œÄ‚ÇÅ·¥πœÄ‚ÇÅ·¥π]t·¥π  = {!   !}
      -- ; _‚®ü·¥πidS·¥π     = Œª _
      --   ‚Üí {!   !}
      -- ; idS·¥π‚®ü·¥π_     = Œª œÉ·¥π
      --   ‚Üí {!   !}
      -- ; ‚®ü·¥π-assoc    = {!   !}
      -- ; œÄ‚ÇÅ·¥π,À¢·¥π      = {!   !}
      -- ; ‚®ü·¥π,À¢·¥π       = {!   !}
      -- ; Œ∑‚àÖÀ¢·¥π        = {!   !}
      -- ; Œ∑,À¢·¥π        = {!   !}
      -- ; [idS·¥π]tm·¥π   = {!   !}
      -- ; [‚®ü·¥π]tm·¥π     = {!   !}
      -- ; œÄ‚ÇÇ·¥π,À¢·¥π      = {!   !}
      }
    }
    -- ; univ =
    --   record
    --   { U·¥π       = {!   !}
    --   ; El·¥π      = {!   !}
    --   ; Lift·¥π    = {!   !}
    --   ; c·¥π       = {!   !}
    --   ; mk·¥π      = {!   !}
    --   ; un·¥π      = {!   !}
    --   ; []·¥πU·¥π    = {!   !}
    --   ; []·¥πEl·¥π   = {!   !}
    --   ; []·¥πLift·¥π = {!   !}
    --   ; []t·¥πc·¥π   = {!   !}
    --   ; []mk·¥π    = {!   !}
    --   ; []un·¥π    = {!   !}
    --   ; U·¥πŒ≤      = {!   !}
    --   ; U·¥πŒ∑      = {!   !}
    --   ; Lift·¥πŒ≤   = {!   !}
    --   ; Lift·¥πŒ∑   = {!   !}
    --   }
    -- ; piTy = record
    --   { Œ†·¥π    = {!   !}
    --   ; ∆õ·¥π_   = {!   !}
    --   ; app·¥π  = {!   !}
    --   ; []·¥πŒ†·¥π = {!   !}
    --   ; []∆õ·¥π  = {!   !}
    --   ; Œ†Œ≤·¥π = {!   !}
    --   ; Œ†Œ∑·¥π = {!   !}
    --   }
    -- ; idTy = record
    --   { Id·¥π      = {!   !}
    --   ; []·¥πId·¥π   = {!   !}
    --   ; refl·¥π    = {!   !}
    --   ; []refl·¥π  = {!   !}
    --   ; reflect·¥π = {!   !}
      -- }
    -- }
