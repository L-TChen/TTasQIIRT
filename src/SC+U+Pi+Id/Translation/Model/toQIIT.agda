open import Prelude
-- copy and modify from Theory
module SC+U+Pi+Id.Translation.Model.toQIIT where

open import SC+U+Pi+Id.QIIT.Syntax     as QIIT
open import SC+U+Pi+Id.QIIT.Properties as QIIT
open import SC+U+Pi+Id.QIIT.Elimination as QE

import SC+U+Pi+Id.QIIRT.Base as R
  hiding (i) 

import SC+U+Pi+Id.QIIRT.Model as RM

open ‚â°-Reasoning
module _ {‚Ñì ‚Ñì‚Ä≤}(QM : Eliminator {‚Ñì} {‚Ñì‚Ä≤}) where
  open Eliminator QM
  open import SC+U+Pi+Id.Translation.Syntax.Translate
    using (From_To_; QIIRT‚ÜíQIIT)
  open From_To_ QIIRT‚ÜíQIIT
  
  toQIIT : RM.Model {‚Ñì} {‚Ñì‚Ä≤}
  toQIIT .RM.Model.Mot = record
    { Ctx·¥π = Œª Œì ‚Üí Ctx·¥π (Œì >c)
    ; Ty·¥π  = Œª Œì·¥π i A ‚Üí Ty·¥π Œì·¥π i (A >ty)
    ; Sub·¥π = Œª Œì·¥π Œî·¥π œÉ ‚Üí Sub·¥π Œì·¥π Œî·¥π (œÉ >s)
    ; Tm·¥π  = Œª Œì·¥π A·¥π t ‚Üí Tm·¥π Œì·¥π A·¥π (t >tm)
    }
  toQIIT .RM.Model.Met = record
    { ùíû    = record
      { [_]·¥π_       = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÉ} {i} {A} œÉ·¥π A·¥π ‚Üí tr Ty·¥πFam ([]>ty œÉ A) ([ œÉ·¥π ]·¥π A·¥π)
      ; ‚àÖ·∂ú·¥π         = ‚àÖ·∂ú·¥π
      ; _,·∂ú·¥π_       = _,·∂ú·¥π_
      ; ‚àÖÀ¢·¥π         = ‚àÖÀ¢·¥π
      ; _,À¢·¥π_       = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÉ} {_} {A} {A·¥π} {t} œÉ·¥π t·¥π
                    ‚Üí œÉ·¥π ,À¢·¥π trTm·¥π‚Çú (sym $ []>ty œÉ A)
                                    (tr¬≤ ([]>ty œÉ A) ‚àô cong (Œª p ‚Üí tr Ty·¥πFam p ([ œÉ·¥π ]·¥π A·¥π)) (trans-sym ≥ ([]>ty œÉ A)))
                                     t·¥π
      ; idS·¥π        = idS·¥π
      ; _‚®ü·¥π_        = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {œÑ} {Œò} {Œò·¥π} {œÉ} œÑ·¥π œÉ·¥π ‚Üí œÑ·¥π ‚®ü·¥π œÉ·¥π
      ; œÄ‚ÇÅ·¥π         = Œª {Œì} {Œì·¥π} {Œî} {Œî·¥π} {i} {A} {A·¥π} {œÉ} œÉ·¥π ‚Üí œÄ‚ÇÅ·¥π œÉ·¥π
      ; [idS·¥π]      = {!   !}
      ; [‚®ü·¥π]·¥π       = {!   !}
      ; [œÄ‚ÇÅ·¥π,À¢·¥π]·¥π   = {!   !}
      ; [œÄ‚ÇÅ·¥π‚®ü·¥π]·¥π    = {!   !}
      ; œÄ‚ÇÇ·¥π         = {!   !}
      ; [_]tm·¥π_     = {!   !}
      ; _‚Üë·¥π_        = {!   !}
      ; idS·¥π‚Üë·¥π      = {!   !}
      ; ‚®ü·¥π‚Üë·¥π        = {!   !}
      ; œÄ‚ÇÅ·¥π,À¢·¥π‚Üë·¥π    = {!   !}
      ; œÄ‚ÇÅ·¥π‚®ü·¥π‚Üë·¥π     = {!   !}
      ; ‚àÖÀ¢·¥π‚Üë·¥π       = {!   !}
      ; ,À¢·¥π‚Üë·¥π       = {!   !}
      ; œÄ‚ÇÅ·¥πidS·¥π‚Üë·¥π   = {!   !}
      ; œÄ‚ÇÅ·¥πœÄ‚ÇÅ·¥π‚Üë·¥π    = {!   !}
      ; [_]t·¥π_      = {!   !}
      ; [idS·¥π]t·¥π    = {!   !}
      ; [‚®ü·¥π]t·¥π      = {!   !}
      ; [œÄ‚ÇÅ·¥π,À¢·¥π]t·¥π  = {!   !}
      ; [œÄ‚ÇÅ·¥π‚®ü·¥π]t·¥π   = {!   !}
      ; [‚àÖÀ¢·¥π]t·¥π     = {!   !}
      ; [,À¢·¥π]t·¥π     = {!   !}
      ; [œÄ‚ÇÅ·¥πidS·¥π]t·¥π = {!   !}
      ; [œÄ‚ÇÅ·¥πœÄ‚ÇÅ·¥π]t·¥π  = {!   !}
      ; _‚®ü·¥πidS·¥π     = Œª _
        ‚Üí {!   !}
      ; idS·¥π‚®ü·¥π_     = Œª œÉ·¥π
        ‚Üí {!   !}
      ; ‚®ü·¥π-assoc    = {!   !}
      ; œÄ‚ÇÅ·¥π,À¢·¥π      = {!   !}
      ; ‚®ü·¥π,À¢·¥π       = {!   !}
      ; Œ∑‚àÖÀ¢·¥π        = {!   !}
      ; Œ∑,À¢·¥π        = {!   !}
      ; [idS·¥π]tm·¥π   = {!   !}
      ; [‚®ü·¥π]tm·¥π     = {!   !}
      ; œÄ‚ÇÇ·¥π,À¢·¥π      = {!   !}
      }
    ; univ = record
      { U·¥π       = {!   !}
      ; El·¥π      = {!   !}
      ; Lift·¥π    = {!   !}
      ; c·¥π       = {!   !}
      ; mk·¥π      = {!   !}
      ; un·¥π      = {!   !}
      ; []·¥πU·¥π    = {!   !}
      ; []·¥πEl·¥π   = {!   !}
      ; []·¥πLift·¥π = {!   !}
      ; []t·¥πc·¥π   = {!   !}
      ; []mk·¥π    = {!   !}
      ; []un·¥π    = {!   !}
      ; U·¥πŒ≤      = {!   !}
      ; U·¥πŒ∑      = {!   !}
      ; Lift·¥πŒ≤   = {!   !}
      ; Lift·¥πŒ∑   = {!   !}
      }
    ; piTy = record
      { Œ†·¥π    = {!   !}
      ; ∆õ·¥π_   = {!   !}
      ; app·¥π  = {!   !}
      ; []·¥πŒ†·¥π = {!   !}
      ; []∆õ·¥π  = {!   !}
      ; Œ†Œ≤·¥π = {!   !}
      ; Œ†Œ∑·¥π = {!   !}
      }
    ; idTy = record
      { Id·¥π      = {!   !}
      ; []·¥πId·¥π   = {!   !}
      ; reflect·¥π = {!   !}
      }
    }
