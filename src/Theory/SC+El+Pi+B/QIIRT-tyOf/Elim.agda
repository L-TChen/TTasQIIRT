module Theory.SC+El+Pi+B.QIIRT-tyOf.Elim where

open import Prelude
open import Agda.Primitive

open import Theory.SC+El+Pi+B.QIIRT-tyOf.Syntax

-- Recursor

module _ {РёЊ РёЊ' РёЊ'' РёЊ'''}
         (Ctxр┤г : Set РёЊ)
         (Tyр┤г : Ctxр┤г Рєњ Set РёЊ')
         (Subр┤г : Ctxр┤г Рєњ Ctxр┤г Рєњ Set РёЊ'')
         (Tmр┤г : Ctxр┤г Рєњ Set РёЊ''')
         (tyOfр┤г : {╬Њр┤г : Ctxр┤г} Рєњ Tmр┤г ╬Њр┤г Рєњ Tyр┤г ╬Њр┤г)
 where

 record Ctxр┤╣ : Set (РёЊ Ріћ РёЊ' Ріћ РёЊ'' Ріћ РёЊ''') where
  field
    РѕЁр┤╣ : Ctxр┤г
    _,р┤╣_ : (╬Њ : Ctxр┤г) (Aр┤╣ : Tyр┤г ╬Њ) Рєњ Ctxр┤г
{-
 record Tyр┤╣ : Set (РёЊ Ріћ РёЊ' Ріћ РёЊ'' Ріћ РёЊ''') where
  field
      _[_]р┤╣ : (A : Tyр┤г ╬ћ) (¤Ѓ : Subр┤г ╬Њ ╬ћ)
         Рєњ Tyр┤г ╬Њ
      [idS]Tр┤╣
        : A РЅА A [ idS ]
      [Рѕў]Tр┤╣
        : (A : Tyр┤г ╬ў) (¤Ѓ : Subр┤г ╬Њ ╬ћ) (¤ё : Subр┤г ╬ћ ╬ў)
        Рєњ A [ ¤ё ]р┤╣ [ ¤Ѓ ]р┤╣ РЅА A [ ¤ё Рѕў ¤Ѓ ]р┤╣
      Uр┤╣
        : Tyр┤г ╬Њ
      U[]р┤╣
        : U [ ¤Ѓ ]р┤╣ РЅА U
      Elр┤╣
        : (u : Tmр┤г ╬Њ) (p : tyOf u РЅА U)
        Рєњ Tyр┤г ╬Њ
      El[]р┤╣
        : (¤ё : Subр┤г ╬Њ ╬ћ) (u : Tmр┤г ╬ћ) (p : tyOf u РЅА U) (q : tyOf (u [ ¤ё ]t) РЅА U)
        Рєњ (El u p) [ ¤ё ]р┤╣ РЅА El (u [ ¤ё ]t) q
      El[]Рѓѓр┤╣
        : (u : Tmр┤г ╬ћ) (pu : tyOf u РЅА U)(puр┤╣ : tyOf (u [ ¤Ѓ ]t) РЅА U)
        Рєњ tyOf (¤ђРѓѓ {╬Њ , El (u [ ¤Ѓ ]t) puр┤╣} idS) РЅА El u pu [ ¤Ѓ Рѕў ¤ђРѓЂ idS ]р┤╣
      ╬ар┤╣
        : (A : Tyр┤г ╬Њ) (B : Tyр┤г (╬Њ , A))
        Рєњ Tyр┤г ╬Њ
      ╬а[]р┤╣
        : (╬а A B) [ ¤Ѓ ]р┤╣ РЅА ╬а (A [ ¤Ѓ ]р┤╣) (B [ ¤Ѓ РєЉ A ]р┤╣)
      ­Юћ╣р┤╣
        : Tyр┤г ╬Њ
      ­Юћ╣[]р┤╣
        : ­Юћ╣ [ ¤Ѓ ]р┤╣ РЅА ­Юћ╣
      ­Юћ╣[]Рѓѓр┤╣
        : tyOf (¤ђРѓѓ {╬Њ , ­Юћ╣} idS) РЅА ­Юћ╣ [ ¤ё ]р┤╣
      El­ЮЋЊр┤╣
        : El {╬Њ} ­ЮЋЊ tyOf­ЮЋЊ РЅА ­Юћ╣
      tyOf¤ђр┤╣
        : (a : Tmр┤г ╬Њ) (pa : tyOf a РЅА U) (b : Tmр┤г (╬Њ , El a pa)) (pb : tyOf b РЅА U)
        Рєњ tyOf (¤ђ a pa b pb) РЅА U
      El¤ђр┤╣
        : (a : Tmр┤г ╬Њ) (pa : tyOf a РЅА U)
        Рєњ (b : Tmр┤г (╬Њ , El a pa)) (pb : tyOf b РЅА U)
        Рєњ El (¤ђ a pa b pb) (tyOf¤ђ a pa b pb) РЅА ╬а (El a pa) (El b pb)
      Tyр┤г-is-set : isSet (Tyр┤г ╬Њ)
-}
module _ {РёЊ РёЊ' РёЊ'' РёЊ'''}
         (Ctxр┤г : Set РёЊ)
         (Tyр┤г : Ctxр┤г Рєњ Set РёЊ')
         (Subр┤г : Ctxр┤г Рєњ Ctxр┤г Рєњ Set РёЊ'')
         (Tmр┤г : Ctxр┤г Рєњ Set РёЊ''')
         (tyOfр┤г : {╬Њр┤г : Ctxр┤г} Рєњ Tmр┤г ╬Њр┤г Рєњ Tyр┤г ╬Њр┤г)
         (Ctxрхљ : Ctxр┤╣ Ctxр┤г Tyр┤г Subр┤г Tmр┤г tyOfр┤г)
 where

  open Ctxр┤╣ Ctxрхљ


  recCtx : Ctx Рєњ Ctxр┤г
  recTy : {╬Њ : Ctx} Рєњ Ty ╬Њ Рєњ Tyр┤г (recCtx ╬Њ)
  recTm : {╬Њ : Ctx} Рєњ Tm ╬Њ Рєњ Tmр┤г (recCtx ╬Њ)
  recSub : {╬Њ ╬ћ : Ctx} Рєњ Sub ╬Њ ╬ћ Рєњ Subр┤г (recCtx ╬Њ) (recCtx ╬ћ)
  recTyOf : {╬Њ : Ctx} Рєњ (t : Tm ╬Њ) Рєњ tyOfр┤г (recTm t) РЅА recTy (tyOf t)

  recCtx РѕЁ' = РѕЁр┤╣
  recCtx (╬Њ , A) = recCtx ╬Њ ,р┤╣ recTy A

  recTy (A [ ¤Ѓ ]) = {!recSub ¤Ѓ!}
  recTy ­Юћ╣' = {!!}
  recTy U' = {!!}
  recTy (El' u p) = {!!}
  recTy (╬а' A B) = {!!}
  recTy ([idS]T' i) = {!!}
  recTy ([Рѕў]T' A ¤Ѓ ¤ё i) = {!!}
  recTy (U[]' i) = {!!}
  recTy (El[]' ¤ё u p q i) = {!!}
  recTy (El[]Рѓѓ' u pu pu' i) = {!!}
  recTy (╬а[]' i) = {!!}
  recTy (­Юћ╣[]' i) = {!!}
  recTy (­Юћ╣[]Рѓѓ' i) = {!!}
  recTy (El­ЮЋЊ' i) = {!!}
  recTy (tyOf¤ђ' a pa b pb i) = {!!}
  recTy (El¤ђ' a pa b pb i) = {!!}
  recTy (Ty-is-set A AРѓЂ x y i iРѓЂ) = {!!}

  recTm t = {!!}

  recSub ¤Ѓ = {!!}

  recTyOf t = {!!}
